#!/usr/bin/env python
from __future__ import print_function
from subprocess import check_call
import os

compressible = {'html': 'html', 'css': 'css', 'js': 'javascript'};

#compress: path -> nil
#side effect: file is minified and gzipped.
def compress(handle):
	ext = os.path.splitext(handle)[1][1:]

	if ext not in compressible:
		print("Did not compress " + handle)
		print("\text: " + os.path.splitext(handle)[1])
		return

	#For certain types, minification is possible.
	if ext == 'css':
		check_call(['yuicompressor', handle, '-o', handle])
	
	check_call(['gzip', handle])
	check_call(['mv', handle + '.gz', handle])

	print("Successfully compressed " + handle)

#upload: path -> nil
#side effect: file is uploaded to s3.
def upload(handle):
	cmd = ['s3cmd']
	ext = os.path.splitext(handle)[1][1:]

	if ext in compressible:
		cmd += ['-m',
				'text/'+compressible[ext],
				"--add-header='Content-Encoding: gzip'"]
	
	cmd += ['put', handle, os.path.join('s3://www.bitlimn.com', handle[6:])]

	print(' '.join(cmd))
	check_call(' '.join(cmd), shell=True)

#walk_site: (path -> nil) -> nil
#side effect: runs fn() on all files in _site.
def walk_site(fn):
	for (path, _, files) in os.walk('_site'):
		for handle in files:
			fn(os.path.join(path, handle))

def main():

	#Remove previous site
	check_call(['rm', '-rf', '_site'])

	#Compile site
	check_call(['compass', 'compile'])
	check_call(['jekyll'])

	#Compress the compressible files in the finished site.
	walk_site(compress)

	#Upload everything to s3. Set the compressed files' content-encoding
	#to gzip and upload.
	walk_site(upload)

if __name__ == '__main__':
	main()